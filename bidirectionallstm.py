# -*- coding: utf-8 -*-
"""BidirectionalLSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1civThi1EmKzMybsxQL1ZIld0Rh6oMNdk
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms

input_size = 28
sequence_length = 28
num_layers = 2
hidden_size = 256
num_classes = 10
learning_rate = 0.001
batch_size = 64
num_epochs = 2

class BRNN(nn.Module):
  def __init__(self, input_size, hidden_size, num_layers, num_classes):
    super(BRNN, self).__init__()
    self.hidden_size = hidden_size
    self.num_layers = num_layers
    self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first = True,
                        bidirectional = True)
    self.fc = nn.Linear(hidden_size, num_classes)
  
  def forward(self, x):
    h0 = torch.zeros(self.num_layers*2, x.size(0), self.hidden_size)
    c0 = torch.zeros(self.num_layers*2, x.size(0), self.hidden_size)

    out, _ = self.lstm(x, (h0,))
    out = self.fc(out[:, -1, :])
    return out